{"version":3,"sources":["recipe.module.css","recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","listStyle","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,SAAW,2B,8ICyB5EC,EAtBA,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAMtC,OACE,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKN,GACL,wBAAIK,MAAO,CAACE,UAAW,SAClBJ,EAAYK,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,KAAhB,SAGR,uBAAGN,UAAWC,IAAMJ,UAApB,cAA2CA,GAC3C,yBAAKG,UAAWC,IAAMH,MAAOS,IAAKT,EAAOU,IAAI,OC2CxCC,G,MA1DH,WAER,IAFc,EAKgBC,mBAAS,IALzB,mBAKPC,EALO,KAKEC,EALF,OAMcF,mBAAS,IANvB,mBAMPG,EANO,KAMCC,EAND,OAOYJ,mBAAS,WAPrB,mBAOPK,EAPO,KAOAC,EAPA,KAUdC,qBAAU,WACNC,MACD,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OAAoCL,EAApC,mBAbjB,WAaiB,oBAZhB,qCAWG,cACTM,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJF,2CAAH,qDAmBhB,OACA,yBAAKxB,UAAY,OACb,0BAAM2B,SATQ,SAAAC,GACdA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMsBd,UAAY,eAC5C,2BAAOA,UAAY,aAAa8B,KAAO,OAAOC,MAAUlB,EAASmB,SAfhD,SAAAJ,GACjBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAcZ,4BAAQb,UAAY,gBAAgB8B,KAAO,UAA3C,WAKA,yBAAK9B,UAAY,WAAjB,IACIW,EAAQP,KAAI,SAAAF,GAAM,OAAM,kBAAE,EAAF,CAASgC,IAAQhC,EAAOA,OAAOiC,MACnDvC,MAAUM,EAAOA,OAAOiC,MACxBtC,SAAaK,EAAOA,OAAOL,SAC3BC,MAAUI,EAAOA,OAAOJ,MACxBC,YAAgBG,EAAOA,OAAOH,qBCvC1BqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAQ,kBACb,IAAMC,WADO,KAEb,kBACA,EADA,OAIAC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.16cae0d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2A56A\",\"image\":\"recipe_image__63m7_\",\"calories\":\"recipe_calories__2v2ny\"};","import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\n\r\nconst Recipe = ({ title, calories, image, ingredients}) => {\r\n\r\n    if (calories => 3000){\r\n        \r\n    }\r\n\r\n    return (\r\n      <div className={style.recipe}>\r\n          <h1>{title}</h1>\r\n          <ul style={{listStyle: 'none',}}>\r\n              {ingredients.map(ingredient =>(\r\n                  <li>{ingredient.text} </li>\r\n              ))}\r\n          </ul>\r\n          <p className={style.calories} > Calories: {calories}</p>\r\n          <img className={style.image} src={image} alt=\"\"\r\n          />\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\r\nimport Recipe from './recipe';\r\nimport styles from './App.css'\r\n\r\nconst App = () => {\r\n\r\n    const APP_ID = \"32199cdd\";\r\n    const APP_KEY = \"9698bf9242b313a5d70c5e9ef4da6d47\";\r\n\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [query, setQuery] = useState('chicken');\r\n\r\n\r\n    useEffect(() => {\r\n        getRecipes()\r\n    }, [query]);\r\n\r\n    const getRecipes = async() => {\r\n        const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\r\n        const data = await response.json();\r\n        setRecipes(data.hits);\r\n        console.log(data.hits);\r\n    };\r\n\r\n    const updateSearch = e => {\r\n        setSearch(e.target.value);\r\n        console.log(search);\r\n    };\r\n\r\n    const getSearch = e => {\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch('');\r\n    }\r\n\r\n\r\n    return ( \r\n    <div className = \"App\" >   \r\n        <form onSubmit = { getSearch }  className = \"search-form\" >\r\n        <input className = \"search-bar\" type = \"text\" value = { search } onChange = { updateSearch }/>\r\n        <button className = \"search-button\" type = \"submit\">\r\n            Search \r\n        </button>  \r\n        </form >\r\n\r\n        <div className = \"recipes\" > {\r\n            recipes.map(recipe => ( < Recipe key = { recipe.recipe.label }\r\n                title = { recipe.recipe.label }\r\n                calories = { recipe.recipe.calories }\r\n                image = { recipe.recipe.image }\r\n                ingredients = { recipe.recipe.ingredients }\r\n                />\r\n            ))\r\n        }\r\n\r\n        </div> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <\n    React.StrictMode >\n    <\n    App / >\n    <\n    /React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}